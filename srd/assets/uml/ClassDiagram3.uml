@startuml
title Wizard - Class Diagram (Server section)

'accessibilit√©
skinparam classAttributeIconSize 0

'pas d'ombre
skinparam shadowing false

'taille de l'image
skinparam dpi 200 

'couleurs
skinparam class {
  BackgroundColor AliceBlue
  ArrowColor CornflowerBlue
  BorderColor CornflowerBlue
}
skinparam stereotypeCBackgroundColor OldLace


class Card {
  - id : unsigned
  - name : string
  - energyCost : unsigned
  - effect : Effect*
  + applyEffect() : void
  + getId() : unsigned
  + getName() : string
  + getEnergyCost() : unsigned
  + gotEffect() : bool
  + getEffectId() : int
  + isMonster() : bool
  + canBeAppliedOnCard() : bool
  + canBeAppliedOnPlayer() : bool
}

class CardManager {
  
}

class CardMonster {
  - life : unsigned
  - attack : unsigned
  - maxLife : unsigned
  - nbrOfTurnsSincePlaced : unsigned
  - taunt : bool
  + dealDamage() : void
  + incrementTurn() : void
  + getLife() : unsigned
  + getAttack() : unsigned
  + getMaxLife() : unsigned
  + getNbrOfTurnsSincePlaced() : unsigned
  + isTaunt() : bool
  + setTaunt() : void
  + setLife() : void
  + setAttack() : void
  + setMaxLife() : void
  + isDead() : bool
}

class ChatManager {
  + sendMessage() : string  
}

class Ranking {
  
}


class CommService {
  
}

class Connection {
  - server_addr : sockaddr_in
  - client_addr : sockaddr_in
  - serverSocket : int
  - sinSize : unsigned int
  - clientThreads : std::vector<pthread_t>
  - newThread : pthread_t
  - {static} newPlayerThread() : void*
  - {static} sendResponse() : void
  + mainLoop() : void
}

class Deck {
  - name : string
  + getName() : string
  + isValide() : bool
  + pickup() : Card*
  + deleteDeck() : bool
  + copyDeck() : Deck*
  + getDeck() : Deck*
}

class Collection {
  # cardsList : vector<Card*>
  + removeCard() : void
  + addCard() : Error
}

class Effect {
  + getId() : unsigned
  + apply() : void
  + canBeAppliedOnCard() : bool
  + canBeAppliedOnPlayer() : bool
}

class FriendsManager {
  
}

class Game {
  - gameStatut : GameStatut
  - currentPlayer : PlayerInGame*
  - turn : unsigned 
  - player1 : PlayerInGame*
  - player2 : PlayerInGame*
  - isInGame() : bool
  - getAdversary() : PlayerInGame*
  - getAdversaryPlacedCard() : vector<CardMonster*>
  + checkDeckAndStart() : void
  + draw() : void
  + placeCardAffectPlayer() : Error
  + placeCard() : Error
  + attackWithCard() : Error
  + attackWithCardAffectPlayer() : Error
  + nextPlayer() : void
  + sendInfoAction() : void
  - beginTurn() : void
  - endTurn() : void
  - canPlayerAttack() : Error
  - verifyTaunt() : bool
  - havePlace() : bool
  - isPlayerAlive() : void
  - placeCard() : Error
  + {static} addPlayerWaitGame() : void
}

enum GameStatut {
  WAIT_DEC
  IN_GAME
}

class PacketManager {
  + manageDisconnectRequest() : void
  + managePacket() : void
  + initGame() : void
  + sendStartTurnInfo() : void
  + sendCard() : void
  + setTurn() : void
  + sendAttack() : void
  + askDiscard() : void
  + sendEndGame() : void
}


class Player {
  - username : string
  - password : string
  - collection : Collection
  - decks : vector<Deck*>
  # victories : unsigned
  # defeats : unsigned
  - save() : void
  # getListDeck() : vector<Deck*>
  + getName() : string
  + getPass() : string
  + getVictories() : unsigned
  + getDefeats() : unsigned
  + getDeck() : Deck*
  + removeDeck() : bool
}

class PlayerInGame {
  - deck : *Deck
  - playerHeal : int
  - energy : int
  - maxEnergy : unsigned
  - cardsInHand : vector<Card*>
  - discard : vector<Card*>
  - cardsPlaced : vector<CardMonster*>
  - limitEnergy : unsigned const = 10
  + haveEnoughEnergy() : bool
  + getCardsPlaced() : vector<CardMonster*>
  + getNbrCardInHand() : unsigned
  + setDeck() : void
  + isDeckDefined() : bool
  + addMaxEnergy() : void
  + resetEnergy() : void
  + discardPlacedCard() : void
  + placeCard() : void
  + takeDamage() : void
  + getHealed() : void
  + getPlayerHeal() :int
  + addDefeat() : void
  + addWin() : void
  + isDead() : bool
}

class PlayerManager {
  - connected : vector<Player*>
  - players : vector<Player*>
  + getRanking() : string
  + loadPlayers() : void
  + signUp() : Player*
  + logIn() : Player*
}


Player <|-- PlayerInGame
Card <|-- CardMonster
Card <-- Effect
PlayerInGame "2" *-- "1" Game
PlayerInGame <-- Deck
Player <-- Collection
Card "20" --> Deck
FriendsManager <-- Player
Player --> PlayerManager
Player --> Ranking
Player "2" o-- "0..*" ChatManager
Card --> CardManager
Collection "1" *-- "100..*" Card
Collection <|-- Deck: <<extend>> [Has 20 cards] >
PacketManager -- Game
GameStatut *-- Game


@enduml